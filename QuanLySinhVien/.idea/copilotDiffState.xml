<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/AdminMainFrame.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/AdminMainFrame.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui;&#10;&#10;import iuh.fit.se.common.dto.AuthResponseDTO;&#10;import iuh.fit.se.common.model.UserRole;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.client.gui.panels.*;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;&#10;/**&#10; * Màn hình chính cho Admin - Quản lý toàn bộ hệ thống&#10; */&#10;public class AdminMainFrame extends JFrame {&#10;    private AuthResponseDTO authResponse;&#10;    private NetworkClient networkClient;&#10;    private JTabbedPane tabbedPane;&#10;    &#10;    // Panels&#10;    private KhoaPanel khoaPanel;&#10;    private LopHocPanel lopHocPanel;&#10;    private GiangVienPanel giangVienPanel;&#10;    private MonHocPanel monHocPanel;&#10;    private HocKyPanel hocKyPanel;&#10;    private SinhVienPanel sinhVienPanel;&#10;    private LopHocPhanPanel lopHocPhanPanel;&#10;&#10;    public AdminMainFrame(AuthResponseDTO authResponse, NetworkClient networkClient) {&#10;        this.authResponse = authResponse;&#10;        this.networkClient = networkClient;&#10;        &#10;        initComponents();&#10;        setupLayout();&#10;        setupMenuBar();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setTitle(&quot;Hệ thống Quản lý Đào tạo - &quot; + authResponse.getUsername() + &#10;                 &quot; (&quot; + getRoleDisplayName() + &quot;)&quot;);&#10;        setSize(1200, 700);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setLocationRelativeTo(null);&#10;        &#10;        // Create tabbed pane&#10;        tabbedPane = new JTabbedPane();&#10;        tabbedPane.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 13));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        // Create panels based on role&#10;        if (authResponse.getRole() == UserRole.ADMIN) {&#10;            // Admin has access to all panels&#10;            khoaPanel = new KhoaPanel(networkClient, authResponse.getAuthToken());&#10;            lopHocPanel = new LopHocPanel(networkClient, authResponse.getAuthToken());&#10;            giangVienPanel = new GiangVienPanel(networkClient, authResponse.getAuthToken());&#10;            monHocPanel = new MonHocPanel(networkClient, authResponse.getAuthToken());&#10;            hocKyPanel = new HocKyPanel(networkClient, authResponse.getAuthToken());&#10;            sinhVienPanel = new SinhVienPanel(networkClient, authResponse.getAuthToken());&#10;            lopHocPhanPanel = new LopHocPhanPanel(networkClient, authResponse.getAuthToken());&#10;            &#10;            tabbedPane.addTab(&quot; Quản lý Khoa&quot;, khoaPanel);&#10;            tabbedPane.addTab(&quot; Quản lý Lớp học&quot;, lopHocPanel);&#10;            tabbedPane.addTab(&quot;‍ Quản lý Giảng viên&quot;, giangVienPanel);&#10;            tabbedPane.addTab(&quot; Quản lý Môn học&quot;, monHocPanel);&#10;            tabbedPane.addTab(&quot; Quản lý Học kỳ&quot;, hocKyPanel);&#10;            tabbedPane.addTab(&quot;‍ Quản lý Sinh viên&quot;, sinhVienPanel);&#10;            tabbedPane.addTab(&quot; Quản lý Lớp học phần&quot;, lopHocPhanPanel);&#10;        }&#10;        &#10;        add(tabbedPane, BorderLayout.CENTER);&#10;        &#10;        // Status bar&#10;        JPanel statusBar = createStatusBar();&#10;        add(statusBar, BorderLayout.SOUTH);&#10;    }&#10;&#10;    private JPanel createStatusBar() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));&#10;        panel.setBackground(new Color(240, 240, 240));&#10;        &#10;        JLabel lblStatus = new JLabel(&quot;Kết nối: localhost:8888 | Người dùng: &quot; + &#10;                                     authResponse.getUsername() + &quot; | Quyền: &quot; + &#10;                                     getRoleDisplayName());&#10;        lblStatus.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 11));&#10;        panel.add(lblStatus, BorderLayout.WEST);&#10;        &#10;        JLabel lblTime = new JLabel(java.time.LocalDateTime.now().format(&#10;            java.time.format.DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm:ss&quot;)));&#10;        lblTime.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 11));&#10;        panel.add(lblTime, BorderLayout.EAST);&#10;        &#10;        // Update time every second&#10;        Timer timer = new Timer(1000, e -&gt; {&#10;            lblTime.setText(java.time.LocalDateTime.now().format(&#10;                java.time.format.DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm:ss&quot;)));&#10;        });&#10;        timer.start();&#10;        &#10;        return panel;&#10;    }&#10;&#10;    private void setupMenuBar() {&#10;        JMenuBar menuBar = new JMenuBar();&#10;        &#10;        // File menu&#10;        JMenu menuFile = new JMenu(&quot;Hệ thống&quot;);&#10;        menuFile.setMnemonic('H');&#10;        &#10;        JMenuItem itemRefresh = new JMenuItem(&quot; Làm mới&quot;);&#10;        itemRefresh.setAccelerator(KeyStroke.getKeyStroke(&quot;F5&quot;));&#10;        itemRefresh.addActionListener(e -&gt; refreshCurrentTab());&#10;        &#10;        JMenuItem itemLogout = new JMenuItem(&quot; Đăng xuất&quot;);&#10;        itemLogout.setAccelerator(KeyStroke.getKeyStroke(&quot;ctrl Q&quot;));&#10;        itemLogout.addActionListener(e -&gt; logout());&#10;        &#10;        JMenuItem itemExit = new JMenuItem(&quot;❌ Thoát&quot;);&#10;        itemExit.setAccelerator(KeyStroke.getKeyStroke(&quot;alt F4&quot;));&#10;        itemExit.addActionListener(e -&gt; exit());&#10;        &#10;        menuFile.add(itemRefresh);&#10;        menuFile.addSeparator();&#10;        menuFile.add(itemLogout);&#10;        menuFile.add(itemExit);&#10;        &#10;        // Help menu&#10;        JMenu menuHelp = new JMenu(&quot;Trợ giúp&quot;);&#10;        menuHelp.setMnemonic('T');&#10;        &#10;        JMenuItem itemAbout = new JMenuItem(&quot;ℹ️ Về chương trình&quot;);&#10;        itemAbout.addActionListener(e -&gt; showAbout());&#10;        &#10;        menuHelp.add(itemAbout);&#10;        &#10;        menuBar.add(menuFile);&#10;        menuBar.add(menuHelp);&#10;        &#10;        setJMenuBar(menuBar);&#10;    }&#10;&#10;    private void refreshCurrentTab() {&#10;        int selectedIndex = tabbedPane.getSelectedIndex();&#10;        Component selectedComponent = tabbedPane.getSelectedComponent();&#10;        &#10;        if (selectedComponent instanceof RefreshablePanel) {&#10;            ((RefreshablePanel) selectedComponent).refresh();&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Đã làm mới dữ liệu!&quot;,&#10;                &quot;Thông báo&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void logout() {&#10;        int choice = JOptionPane.showConfirmDialog(this,&#10;            &quot;Bạn có chắc chắn muốn đăng xuất?&quot;,&#10;            &quot;Xác nhận đăng xuất&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            JOptionPane.QUESTION_MESSAGE);&#10;        &#10;        if (choice == JOptionPane.YES_OPTION) {&#10;            // Send logout request&#10;            try {&#10;                Request request = new Request(Command.LOGOUT, null, authResponse.getAuthToken());&#10;                networkClient.sendRequest(request);&#10;            } catch (Exception ex) {&#10;                ex.printStackTrace();&#10;            }&#10;            &#10;            // Close current frame&#10;            dispose();&#10;            &#10;            // Open login frame&#10;            SwingUtilities.invokeLater(() -&gt; {&#10;                LoginFrame loginFrame = new LoginFrame();&#10;                loginFrame.setVisible(true);&#10;            });&#10;        }&#10;    }&#10;&#10;    private void exit() {&#10;        int choice = JOptionPane.showConfirmDialog(this,&#10;            &quot;Bạn có chắc chắn muốn thoát chương trình?&quot;,&#10;            &quot;Xác nhận thoát&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            JOptionPane.QUESTION_MESSAGE);&#10;        &#10;        if (choice == JOptionPane.YES_OPTION) {&#10;            // Send logout request&#10;            try {&#10;                Request request = new Request(Command.LOGOUT, null, authResponse.getAuthToken());&#10;                networkClient.sendRequest(request);&#10;            } catch (Exception ex) {&#10;                ex.printStackTrace();&#10;            }&#10;            &#10;            networkClient.close();&#10;            System.exit(0);&#10;        }&#10;    }&#10;&#10;    private void showAbout() {&#10;        String message = &quot;HỆ THỐNG QUẢN LÝ ĐÀO TẠO\n\n&quot; +&#10;                        &quot;Phiên bản: 2.0 (Nâng cao)\n&quot; +&#10;                        &quot;Kiến trúc: Client-Server\n&quot; +&#10;                        &quot;Công nghệ: Java Socket + JPA + SQL Server\n\n&quot; +&#10;                        &quot;Tính năng:\n&quot; +&#10;                        &quot;• Quản lý Khoa, Lớp, Môn học\n&quot; +&#10;                        &quot;• Quản lý Giảng viên, Sinh viên\n&quot; +&#10;                        &quot;• Quản lý Lớp học phần\n&quot; +&#10;                        &quot;• Đăng ký học phần, Nhập điểm\n&quot; +&#10;                        &quot;• Phân quyền theo vai trò\n\n&quot; +&#10;                        &quot;© 2024 - IUH University&quot;;&#10;        &#10;        JOptionPane.showMessageDialog(this,&#10;            message,&#10;            &quot;Về chương trình&quot;,&#10;            JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;&#10;    private String getRoleDisplayName() {&#10;        switch (authResponse.getRole()) {&#10;            case ADMIN: return &quot;Quản trị viên&quot;;&#10;            case GIANG_VIEN: return &quot;Giảng viên&quot;;&#10;            case SINH_VIEN: return &quot;Sinh viên&quot;;&#10;            default: return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Interface for panels that can be refreshed&#10;     */&#10;    public interface RefreshablePanel {&#10;        void refresh();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/LoginFrame.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/LoginFrame.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui;&#10;&#10;import iuh.fit.se.common.dto.AuthResponseDTO;&#10;import iuh.fit.se.common.dto.LoginDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.KeyAdapter;&#10;import java.awt.event.KeyEvent;&#10;&#10;/**&#10; * Màn hình đăng nhập&#10; */&#10;public class LoginFrame extends JFrame {&#10;    private JTextField txtUsername;&#10;    private JPasswordField txtPassword;&#10;    private JButton btnLogin;&#10;    private JButton btnExit;&#10;    private NetworkClient networkClient;&#10;&#10;    public LoginFrame() {&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setTitle(&quot;Đăng nhập - Hệ thống Quản lý Đào tạo&quot;);&#10;        setSize(400, 300);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setLocationRelativeTo(null);&#10;        setResizable(false);&#10;&#10;        // Initialize network client&#10;        try {&#10;            networkClient = new NetworkClient(&quot;localhost&quot;, 8888);&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Không thể kết nối tới server!\n&quot; + e.getMessage(),&#10;                &quot;Lỗi kết nối&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;            System.exit(1);&#10;        }&#10;    }&#10;&#10;    private void setupLayout() {&#10;        // Main panel with padding&#10;        JPanel mainPanel = new JPanel();&#10;        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 40, 20, 40));&#10;&#10;        // Title&#10;        JLabel lblTitle = new JLabel(&quot;HỆ THỐNG QUẢN LÝ ĐÀO TẠO&quot;);&#10;        lblTitle.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        lblTitle.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        lblTitle.setForeground(new Color(0, 102, 204));&#10;&#10;        JLabel lblSubtitle = new JLabel(&quot;Đăng nhập hệ thống&quot;);&#10;        lblSubtitle.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        lblSubtitle.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;&#10;        // Username panel&#10;        JPanel pnlUsername = new JPanel(new BorderLayout(10, 5));&#10;        pnlUsername.setMaximumSize(new Dimension(300, 30));&#10;        JLabel lblUsername = new JLabel(&quot;Tên đăng nhập:&quot;);&#10;        lblUsername.setPreferredSize(new Dimension(120, 25));&#10;        txtUsername = new JTextField();&#10;        pnlUsername.add(lblUsername, BorderLayout.WEST);&#10;        pnlUsername.add(txtUsername, BorderLayout.CENTER);&#10;&#10;        // Password panel&#10;        JPanel pnlPassword = new JPanel(new BorderLayout(10, 5));&#10;        pnlPassword.setMaximumSize(new Dimension(300, 30));&#10;        JLabel lblPassword = new JLabel(&quot;Mật khẩu:&quot;);&#10;        lblPassword.setPreferredSize(new Dimension(120, 25));&#10;        txtPassword = new JPasswordField();&#10;        pnlPassword.add(lblPassword, BorderLayout.WEST);&#10;        pnlPassword.add(txtPassword, BorderLayout.CENTER);&#10;&#10;        // Button panel&#10;        JPanel pnlButtons = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));&#10;        btnLogin = new JButton(&quot;Đăng nhập&quot;);&#10;        btnLogin.setPreferredSize(new Dimension(120, 35));&#10;        btnLogin.setBackground(new Color(0, 102, 204));&#10;        btnLogin.setForeground(Color.WHITE);&#10;        btnLogin.setFocusPainted(false);&#10;&#10;        btnExit = new JButton(&quot;Thoát&quot;);&#10;        btnExit.setPreferredSize(new Dimension(120, 35));&#10;        btnExit.setBackground(new Color(220, 53, 69));&#10;        btnExit.setForeground(Color.WHITE);&#10;        btnExit.setFocusPainted(false);&#10;&#10;        pnlButtons.add(btnLogin);&#10;        pnlButtons.add(btnExit);&#10;&#10;        // Add components to main panel&#10;        mainPanel.add(lblTitle);&#10;        mainPanel.add(Box.createRigidArea(new Dimension(0, 5)));&#10;        mainPanel.add(lblSubtitle);&#10;        mainPanel.add(Box.createRigidArea(new Dimension(0, 30)));&#10;        mainPanel.add(pnlUsername);&#10;        mainPanel.add(Box.createRigidArea(new Dimension(0, 15)));&#10;        mainPanel.add(pnlPassword);&#10;        mainPanel.add(Box.createRigidArea(new Dimension(0, 25)));&#10;        mainPanel.add(pnlButtons);&#10;&#10;        add(mainPanel);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        // Login button&#10;        btnLogin.addActionListener(e -&gt; performLogin());&#10;&#10;        // Exit button&#10;        btnExit.addActionListener(e -&gt; {&#10;            if (networkClient != null) {&#10;                networkClient.close();&#10;            }&#10;            System.exit(0);&#10;        });&#10;&#10;        // Enter key on password field&#10;        txtPassword.addKeyListener(new KeyAdapter() {&#10;            @Override&#10;            public void keyPressed(KeyEvent e) {&#10;                if (e.getKeyCode() == KeyEvent.VK_ENTER) {&#10;                    performLogin();&#10;                }&#10;            }&#10;        });&#10;&#10;        // Enter key on username field&#10;        txtUsername.addKeyListener(new KeyAdapter() {&#10;            @Override&#10;            public void keyPressed(KeyEvent e) {&#10;                if (e.getKeyCode() == KeyEvent.VK_ENTER) {&#10;                    txtPassword.requestFocus();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void performLogin() {&#10;        String username = txtUsername.getText().trim();&#10;        String password = new String(txtPassword.getPassword());&#10;&#10;        if (username.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Vui lòng nhập tên đăng nhập!&quot;,&#10;                &quot;Thông báo&quot;,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            txtUsername.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Vui lòng nhập mật khẩu!&quot;,&#10;                &quot;Thông báo&quot;,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            txtPassword.requestFocus();&#10;            return;&#10;        }&#10;&#10;        // Show loading&#10;        btnLogin.setEnabled(false);&#10;        btnLogin.setText(&quot;Đang đăng nhập...&quot;);&#10;&#10;        // Perform login in background thread&#10;        SwingWorker&lt;Response, Void&gt; worker = new SwingWorker&lt;Response, Void&gt;() {&#10;            @Override&#10;            protected Response doInBackground() throws Exception {&#10;                LoginDTO loginDTO = new LoginDTO(username, password);&#10;                Request request = new Request(Command.LOGIN, loginDTO, null);&#10;                return networkClient.sendRequest(request);&#10;            }&#10;&#10;            @Override&#10;            protected void done() {&#10;                try {&#10;                    Response response = get();&#10;                    &#10;                    if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof AuthResponseDTO) {&#10;                        AuthResponseDTO authResponse = (AuthResponseDTO) response.getData();&#10;                        &#10;                        // Close login frame&#10;                        dispose();&#10;                        &#10;                        // Open main frame&#10;                        SwingUtilities.invokeLater(() -&gt; {&#10;                            AdminMainFrame mainFrame = new AdminMainFrame(authResponse, networkClient);&#10;                            mainFrame.setVisible(true);&#10;                        });&#10;                    } else {&#10;                        JOptionPane.showMessageDialog(LoginFrame.this,&#10;                            response.getMessage(),&#10;                            &quot;Đăng nhập thất bại&quot;,&#10;                            JOptionPane.ERROR_MESSAGE);&#10;                        txtPassword.setText(&quot;&quot;);&#10;                        txtPassword.requestFocus();&#10;                    }&#10;                } catch (Exception ex) {&#10;                    JOptionPane.showMessageDialog(LoginFrame.this,&#10;                        &quot;Lỗi kết nối: &quot; + ex.getMessage(),&#10;                        &quot;Lỗi&quot;,&#10;                        JOptionPane.ERROR_MESSAGE);&#10;                } finally {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                }&#10;            }&#10;        };&#10;&#10;        worker.execute();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        // Set look and feel&#10;        try {&#10;            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            LoginFrame loginFrame = new LoginFrame();&#10;            loginFrame.setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/GiangVienPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/GiangVienPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.GiangVienDTO;&#10;import iuh.fit.se.common.dto.KhoaDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.List;&#10;&#10;public class GiangVienPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaGV, txtHoTen, txtHocVi;&#10;    private JComboBox&lt;String&gt; cboKhoa;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnClear;&#10;&#10;    public GiangVienPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadKhoa();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã GV&quot;, &quot;Họ tên&quot;, &quot;Học vị&quot;, &quot;Mã Khoa&quot;, &quot;Tên Khoa&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) { return false; }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        table.setRowHeight(25);&#10;&#10;        txtMaGV = new JTextField(15);&#10;        txtHoTen = new JTextField(25);&#10;        txtHocVi = new JTextField(15);&#10;        cboKhoa = new JComboBox&lt;&gt;();&#10;&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Giảng viên&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã GV:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaGV, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Họ tên:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtHoTen, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Học vị:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtHocVi, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Khoa:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(cboKhoa, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(new JScrollPane(table), BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting() &amp;&amp; table.getSelectedRow() &gt;= 0) {&#10;                int row = table.getSelectedRow();&#10;                txtMaGV.setText(tableModel.getValueAt(row, 0).toString());&#10;                txtHoTen.setText(tableModel.getValueAt(row, 1).toString());&#10;                txtHocVi.setText(tableModel.getValueAt(row, 2).toString());&#10;                cboKhoa.setSelectedItem(tableModel.getValueAt(row, 3).toString());&#10;                txtMaGV.setEditable(false);&#10;            }&#10;        });&#10;&#10;        btnAdd.addActionListener(e -&gt; addGiangVien());&#10;        btnUpdate.addActionListener(e -&gt; updateGiangVien());&#10;        btnDelete.addActionListener(e -&gt; deleteGiangVien());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void loadKhoa() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.KHOA_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;KhoaDTO&gt; list = (List&lt;KhoaDTO&gt;) response.getData();&#10;                cboKhoa.removeAllItems();&#10;                for (KhoaDTO dto : list) cboKhoa.addItem(dto.getMaKhoa());&#10;            }&#10;        } catch (Exception ex) { ex.printStackTrace(); }&#10;    }&#10;&#10;    private void addGiangVien() {&#10;        String maGV = txtMaGV.getText().trim();&#10;        String hoTen = txtHoTen.getText().trim();&#10;        String hocVi = txtHocVi.getText().trim();&#10;        String maKhoa = (String) cboKhoa.getSelectedItem();&#10;&#10;        if (maGV.isEmpty() || hoTen.isEmpty() || maKhoa == null) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        GiangVienDTO dto = new GiangVienDTO(maGV, hoTen, hocVi, maKhoa, null);&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.GIANGVIEN_ADD, dto, authToken));&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Thêm giảng viên thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi kết nối: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateGiangVien() {&#10;        String maGV = txtMaGV.getText().trim();&#10;        if (maGV.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn giảng viên!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        GiangVienDTO dto = new GiangVienDTO(maGV, txtHoTen.getText().trim(), txtHocVi.getText().trim(), &#10;                                            (String) cboKhoa.getSelectedItem(), null);&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.GIANGVIEN_UPDATE, dto, authToken));&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Cập nhật thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteGiangVien() {&#10;        int row = table.getSelectedRow();&#10;        if (row &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn giảng viên!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        String maGV = tableModel.getValueAt(row, 0).toString();&#10;        if (JOptionPane.showConfirmDialog(this, &quot;Xóa giảng viên &quot; + maGV + &quot;?&quot;, &quot;Xác nhận&quot;, &#10;            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {&#10;            try {&#10;                Response response = networkClient.sendRequest(new Request(Command.GIANGVIEN_DELETE, maGV, authToken));&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa thành công!&quot;);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;        loadKhoa();&#10;    }&#10;&#10;    private void loadData() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.GIANGVIEN_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;GiangVienDTO&gt; list = (List&lt;GiangVienDTO&gt;) response.getData();&#10;                tableModel.setRowCount(0);&#10;                for (GiangVienDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{dto.getMaGV(), dto.getHoTen(), dto.getHocVi(), &#10;                                                   dto.getMaKhoa(), dto.getTenKhoa()});&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaGV.setText(&quot;&quot;);&#10;        txtHoTen.setText(&quot;&quot;);&#10;        txtHocVi.setText(&quot;&quot;);&#10;        if (cboKhoa.getItemCount() &gt; 0) cboKhoa.setSelectedIndex(0);&#10;        txtMaGV.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/HocKyPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/HocKyPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.HocKyDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class HocKyPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaHocKy, txtTenHocKy, txtNgayBatDau, txtNgayKetThuc;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnClear;&#10;    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;    public HocKyPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã Học kỳ&quot;, &quot;Tên Học kỳ&quot;, &quot;Ngày bắt đầu&quot;, &quot;Ngày kết thúc&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) { return false; }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setRowHeight(25);&#10;&#10;        txtMaHocKy = new JTextField(15);&#10;        txtTenHocKy = new JTextField(30);&#10;        txtNgayBatDau = new JTextField(12);&#10;        txtNgayKetThuc = new JTextField(12);&#10;&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Học kỳ&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã Học kỳ:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaHocKy, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Tên Học kỳ:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtTenHocKy, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Ngày bắt đầu (dd/MM/yyyy):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtNgayBatDau, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Ngày kết thúc (dd/MM/yyyy):&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtNgayKetThuc, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(new JScrollPane(table), BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting() &amp;&amp; table.getSelectedRow() &gt;= 0) {&#10;                int row = table.getSelectedRow();&#10;                txtMaHocKy.setText(tableModel.getValueAt(row, 0).toString());&#10;                txtTenHocKy.setText(tableModel.getValueAt(row, 1).toString());&#10;                txtNgayBatDau.setText(tableModel.getValueAt(row, 2).toString());&#10;                txtNgayKetThuc.setText(tableModel.getValueAt(row, 3).toString());&#10;                txtMaHocKy.setEditable(false);&#10;            }&#10;        });&#10;&#10;        btnAdd.addActionListener(e -&gt; addHocKy());&#10;        btnUpdate.addActionListener(e -&gt; updateHocKy());&#10;        btnDelete.addActionListener(e -&gt; deleteHocKy());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void addHocKy() {&#10;        try {&#10;            String maHocKy = txtMaHocKy.getText().trim();&#10;            String tenHocKy = txtTenHocKy.getText().trim();&#10;            LocalDate ngayBatDau = LocalDate.parse(txtNgayBatDau.getText().trim(), formatter);&#10;            LocalDate ngayKetThuc = LocalDate.parse(txtNgayKetThuc.getText().trim(), formatter);&#10;&#10;            if (maHocKy.isEmpty() || tenHocKy.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;);&#10;                return;&#10;            }&#10;&#10;            HocKyDTO dto = new HocKyDTO(maHocKy, tenHocKy, ngayBatDau, ngayKetThuc);&#10;            Response response = networkClient.sendRequest(new Request(Command.HOCKY_ADD, dto, authToken));&#10;            &#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Thêm học kỳ thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage() + &quot;\nĐịnh dạng ngày: dd/MM/yyyy&quot;, &#10;                &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateHocKy() {&#10;        try {&#10;            String maHocKy = txtMaHocKy.getText().trim();&#10;            if (maHocKy.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn học kỳ!&quot;);&#10;                return;&#10;            }&#10;&#10;            LocalDate ngayBatDau = LocalDate.parse(txtNgayBatDau.getText().trim(), formatter);&#10;            LocalDate ngayKetThuc = LocalDate.parse(txtNgayKetThuc.getText().trim(), formatter);&#10;&#10;            HocKyDTO dto = new HocKyDTO(maHocKy, txtTenHocKy.getText().trim(), ngayBatDau, ngayKetThuc);&#10;            Response response = networkClient.sendRequest(new Request(Command.HOCKY_UPDATE, dto, authToken));&#10;            &#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Cập nhật thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteHocKy() {&#10;        int row = table.getSelectedRow();&#10;        if (row &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn học kỳ!&quot;);&#10;            return;&#10;        }&#10;&#10;        String maHocKy = tableModel.getValueAt(row, 0).toString();&#10;        if (JOptionPane.showConfirmDialog(this, &quot;Xóa học kỳ &quot; + maHocKy + &quot;?&quot;, &quot;Xác nhận&quot;, &#10;            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {&#10;            try {&#10;                Response response = networkClient.sendRequest(new Request(Command.HOCKY_DELETE, maHocKy, authToken));&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa thành công!&quot;);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;    }&#10;&#10;    private void loadData() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.HOCKY_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;HocKyDTO&gt; list = (List&lt;HocKyDTO&gt;) response.getData();&#10;                tableModel.setRowCount(0);&#10;                for (HocKyDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{&#10;                        dto.getMaHocKy(), &#10;                        dto.getTenHocKy(), &#10;                        dto.getNgayBatDau().format(formatter),&#10;                        dto.getNgayKetThuc().format(formatter)&#10;                    });&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaHocKy.setText(&quot;&quot;);&#10;        txtTenHocKy.setText(&quot;&quot;);&#10;        txtNgayBatDau.setText(&quot;&quot;);&#10;        txtNgayKetThuc.setText(&quot;&quot;);&#10;        txtMaHocKy.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/KhoaPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/KhoaPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.KhoaDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.List;&#10;&#10;/**&#10; * Panel quản lý Khoa (Faculty/Department)&#10; */&#10;public class KhoaPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    &#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaKhoa;&#10;    private JTextField txtTenKhoa;&#10;    private JButton btnAdd;&#10;    private JButton btnUpdate;&#10;    private JButton btnDelete;&#10;    private JButton btnRefresh;&#10;    private JButton btnClear;&#10;&#10;    public KhoaPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        &#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        // Table&#10;        String[] columnNames = {&quot;Mã Khoa&quot;, &quot;Tên Khoa&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false;&#10;            }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        table.setRowHeight(25);&#10;        table.getTableHeader().setFont(new Font(&quot;Arial&quot;, Font.BOLD, 13));&#10;        table.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        // Input fields&#10;        txtMaKhoa = new JTextField(20);&#10;        txtTenKhoa = new JTextField(30);&#10;&#10;        // Buttons&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        // Top panel - Form nhập liệu&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Khoa&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // Mã Khoa&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã Khoa:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaKhoa, gbc);&#10;&#10;        // Tên Khoa&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Tên Khoa:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtTenKhoa, gbc);&#10;&#10;        // Buttons&#10;        gbc.gridx = 4; gbc.gridy = 0;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        // Center panel - Table&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        scrollPane.setBorder(BorderFactory.createTitledBorder(&quot;Danh sách Khoa&quot;));&#10;        add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        // Table selection&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                int selectedRow = table.getSelectedRow();&#10;                if (selectedRow &gt;= 0) {&#10;                    txtMaKhoa.setText(tableModel.getValueAt(selectedRow, 0).toString());&#10;                    txtTenKhoa.setText(tableModel.getValueAt(selectedRow, 1).toString());&#10;                    txtMaKhoa.setEditable(false);&#10;                }&#10;            }&#10;        });&#10;&#10;        // Buttons&#10;        btnAdd.addActionListener(e -&gt; addKhoa());&#10;        btnUpdate.addActionListener(e -&gt; updateKhoa());&#10;        btnDelete.addActionListener(e -&gt; deleteKhoa());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void addKhoa() {&#10;        String maKhoa = txtMaKhoa.getText().trim();&#10;        String tenKhoa = txtTenKhoa.getText().trim();&#10;&#10;        if (maKhoa.isEmpty() || tenKhoa.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Vui lòng nhập đầy đủ thông tin!&quot;,&#10;                &quot;Cảnh báo&quot;,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        KhoaDTO dto = new KhoaDTO(maKhoa, tenKhoa);&#10;        Request request = new Request(Command.KHOA_ADD, dto, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Thêm khoa thành công!&quot;,&#10;                    &quot;Thành công&quot;,&#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Lỗi: &quot; + response.getMessage(),&#10;                    &quot;Lỗi&quot;,&#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Lỗi kết nối: &quot; + ex.getMessage(),&#10;                &quot;Lỗi&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateKhoa() {&#10;        String maKhoa = txtMaKhoa.getText().trim();&#10;        String tenKhoa = txtTenKhoa.getText().trim();&#10;&#10;        if (maKhoa.isEmpty() || tenKhoa.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Vui lòng chọn khoa cần cập nhật!&quot;,&#10;                &quot;Cảnh báo&quot;,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        KhoaDTO dto = new KhoaDTO(maKhoa, tenKhoa);&#10;        Request request = new Request(Command.KHOA_UPDATE, dto, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Cập nhật khoa thành công!&quot;,&#10;                    &quot;Thành công&quot;,&#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Lỗi: &quot; + response.getMessage(),&#10;                    &quot;Lỗi&quot;,&#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Lỗi kết nối: &quot; + ex.getMessage(),&#10;                &quot;Lỗi&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteKhoa() {&#10;        int selectedRow = table.getSelectedRow();&#10;        if (selectedRow &lt; 0) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Vui lòng chọn khoa cần xóa!&quot;,&#10;                &quot;Cảnh báo&quot;,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        String maKhoa = tableModel.getValueAt(selectedRow, 0).toString();&#10;        &#10;        int confirm = JOptionPane.showConfirmDialog(this,&#10;            &quot;Bạn có chắc chắn muốn xóa khoa &quot; + maKhoa + &quot;?&quot;,&#10;            &quot;Xác nhận xóa&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            JOptionPane.QUESTION_MESSAGE);&#10;&#10;        if (confirm == JOptionPane.YES_OPTION) {&#10;            Request request = new Request(Command.KHOA_DELETE, maKhoa, authToken);&#10;&#10;            try {&#10;                Response response = networkClient.sendRequest(request);&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this,&#10;                        &quot;Xóa khoa thành công!&quot;,&#10;                        &quot;Thành công&quot;,&#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this,&#10;                        &quot;Lỗi: &quot; + response.getMessage(),&#10;                        &quot;Lỗi&quot;,&#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Lỗi kết nối: &quot; + ex.getMessage(),&#10;                    &quot;Lỗi&quot;,&#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;    }&#10;&#10;    private void loadData() {&#10;        Request request = new Request(Command.KHOA_GET_ALL, null, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;KhoaDTO&gt; list = (List&lt;KhoaDTO&gt;) response.getData();&#10;                &#10;                tableModel.setRowCount(0);&#10;                for (KhoaDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{dto.getMaKhoa(), dto.getTenKhoa()});&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage(),&#10;                &quot;Lỗi&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaKhoa.setText(&quot;&quot;);&#10;        txtTenKhoa.setText(&quot;&quot;);&#10;        txtMaKhoa.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/LopHocPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/LopHocPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.KhoaDTO;&#10;import iuh.fit.se.common.dto.LopHocDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.List;&#10;&#10;public class LopHocPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    &#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaLop, txtTenLop, txtNienKhoa;&#10;    private JComboBox&lt;String&gt; cboKhoa;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnClear;&#10;&#10;    public LopHocPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        &#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadKhoa();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã Lớp&quot;, &quot;Tên Lớp&quot;, &quot;Niên khóa&quot;, &quot;Mã Khoa&quot;, &quot;Tên Khoa&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false;&#10;            }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        table.setRowHeight(25);&#10;        table.getTableHeader().setFont(new Font(&quot;Arial&quot;, Font.BOLD, 13));&#10;&#10;        txtMaLop = new JTextField(15);&#10;        txtTenLop = new JTextField(25);&#10;        txtNienKhoa = new JTextField(12);&#10;        cboKhoa = new JComboBox&lt;&gt;();&#10;&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Lớp học&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // Row 1&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã Lớp:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaLop, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Tên Lớp:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtTenLop, gbc);&#10;&#10;        // Row 2&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Niên khóa:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtNienKhoa, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Khoa:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(cboKhoa, gbc);&#10;&#10;        // Buttons&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        scrollPane.setBorder(BorderFactory.createTitledBorder(&quot;Danh sách Lớp học&quot;));&#10;        add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                int selectedRow = table.getSelectedRow();&#10;                if (selectedRow &gt;= 0) {&#10;                    txtMaLop.setText(tableModel.getValueAt(selectedRow, 0).toString());&#10;                    txtTenLop.setText(tableModel.getValueAt(selectedRow, 1).toString());&#10;                    txtNienKhoa.setText(tableModel.getValueAt(selectedRow, 2).toString());&#10;                    cboKhoa.setSelectedItem(tableModel.getValueAt(selectedRow, 3).toString());&#10;                    txtMaLop.setEditable(false);&#10;                }&#10;            }&#10;        });&#10;&#10;        btnAdd.addActionListener(e -&gt; addLopHoc());&#10;        btnUpdate.addActionListener(e -&gt; updateLopHoc());&#10;        btnDelete.addActionListener(e -&gt; deleteLopHoc());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void loadKhoa() {&#10;        Request request = new Request(Command.KHOA_GET_ALL, null, authToken);&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;KhoaDTO&gt; list = (List&lt;KhoaDTO&gt;) response.getData();&#10;                cboKhoa.removeAllItems();&#10;                for (KhoaDTO dto : list) {&#10;                    cboKhoa.addItem(dto.getMaKhoa());&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void addLopHoc() {&#10;        String maLop = txtMaLop.getText().trim();&#10;        String tenLop = txtTenLop.getText().trim();&#10;        String nienKhoa = txtNienKhoa.getText().trim();&#10;        String maKhoa = (String) cboKhoa.getSelectedItem();&#10;&#10;        if (maLop.isEmpty() || tenLop.isEmpty() || nienKhoa.isEmpty() || maKhoa == null) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        LopHocDTO dto = new LopHocDTO(maLop, tenLop, nienKhoa, maKhoa, null);&#10;        Request request = new Request(Command.LOPHOC_ADD, dto, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Thêm lớp học thành công!&quot;, &quot;Thành công&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi kết nối: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateLopHoc() {&#10;        String maLop = txtMaLop.getText().trim();&#10;        String tenLop = txtTenLop.getText().trim();&#10;        String nienKhoa = txtNienKhoa.getText().trim();&#10;        String maKhoa = (String) cboKhoa.getSelectedItem();&#10;&#10;        if (maLop.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn lớp cần cập nhật!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        LopHocDTO dto = new LopHocDTO(maLop, tenLop, nienKhoa, maKhoa, null);&#10;        Request request = new Request(Command.LOPHOC_UPDATE, dto, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Cập nhật lớp học thành công!&quot;, &quot;Thành công&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi kết nối: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteLopHoc() {&#10;        int selectedRow = table.getSelectedRow();&#10;        if (selectedRow &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn lớp cần xóa!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        String maLop = tableModel.getValueAt(selectedRow, 0).toString();&#10;        &#10;        int confirm = JOptionPane.showConfirmDialog(this, &quot;Bạn có chắc chắn muốn xóa lớp &quot; + maLop + &quot;?&quot;, &#10;            &quot;Xác nhận xóa&quot;, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);&#10;&#10;        if (confirm == JOptionPane.YES_OPTION) {&#10;            Request request = new Request(Command.LOPHOC_DELETE, maLop, authToken);&#10;&#10;            try {&#10;                Response response = networkClient.sendRequest(request);&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa lớp học thành công!&quot;, &quot;Thành công&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi kết nối: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;        loadKhoa();&#10;    }&#10;&#10;    private void loadData() {&#10;        Request request = new Request(Command.LOPHOC_GET_ALL, null, authToken);&#10;&#10;        try {&#10;            Response response = networkClient.sendRequest(request);&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;LopHocDTO&gt; list = (List&lt;LopHocDTO&gt;) response.getData();&#10;                &#10;                tableModel.setRowCount(0);&#10;                for (LopHocDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{&#10;                        dto.getMaLop(), dto.getTenLop(), dto.getNienKhoa(), &#10;                        dto.getMaKhoa(), dto.getTenKhoa()&#10;                    });&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaLop.setText(&quot;&quot;);&#10;        txtTenLop.setText(&quot;&quot;);&#10;        txtNienKhoa.setText(&quot;&quot;);&#10;        cboKhoa.setSelectedIndex(0);&#10;        txtMaLop.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/LopHocPhanPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/LopHocPhanPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.*;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class LopHocPhanPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JComboBox&lt;String&gt; cboMonHoc, cboGiangVien, cboHocKy;&#10;    private JTextField txtSoLuongToiDa;&#10;    private JButton btnAdd, btnDelete, btnRefresh, btnClear;&#10;&#10;    public LopHocPhanPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadComboBoxData();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã LHP&quot;, &quot;Môn học&quot;, &quot;Giảng viên&quot;, &quot;Học kỳ&quot;, &quot;Sĩ số tối đa&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) { return false; }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setRowHeight(25);&#10;&#10;        cboMonHoc = new JComboBox&lt;&gt;();&#10;        cboGiangVien = new JComboBox&lt;&gt;();&#10;        cboHocKy = new JComboBox&lt;&gt;();&#10;        txtSoLuongToiDa = new JTextField(10);&#10;&#10;        btnAdd = new JButton(&quot;➕ Mở lớp học phần&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Mở lớp học phần mới&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // Row 1&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Môn học:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(cboMonHoc, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Giảng viên:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(cboGiangVien, gbc);&#10;&#10;        // Row 2&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Học kỳ:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(cboHocKy, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Sĩ số tối đa:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtSoLuongToiDa, gbc);&#10;&#10;        // Buttons&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(new JScrollPane(table), BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        btnAdd.addActionListener(e -&gt; moLopHocPhan());&#10;        btnDelete.addActionListener(e -&gt; deleteLopHocPhan());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void loadComboBoxData() {&#10;        // Load Môn học&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.MONHOC_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;MonHocDTO&gt; list = (List&lt;MonHocDTO&gt;) response.getData();&#10;                cboMonHoc.removeAllItems();&#10;                for (MonHocDTO dto : list) {&#10;                    cboMonHoc.addItem(dto.getMaMH() + &quot; - &quot; + dto.getTenMH());&#10;                }&#10;            }&#10;        } catch (Exception ex) { ex.printStackTrace(); }&#10;&#10;        // Load Giảng viên&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.GIANGVIEN_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;GiangVienDTO&gt; list = (List&lt;GiangVienDTO&gt;) response.getData();&#10;                cboGiangVien.removeAllItems();&#10;                for (GiangVienDTO dto : list) {&#10;                    cboGiangVien.addItem(dto.getMaGV() + &quot; - &quot; + dto.getHoTen());&#10;                }&#10;            }&#10;        } catch (Exception ex) { ex.printStackTrace(); }&#10;&#10;        // Load Học kỳ&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.HOCKY_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;HocKyDTO&gt; list = (List&lt;HocKyDTO&gt;) response.getData();&#10;                cboHocKy.removeAllItems();&#10;                for (HocKyDTO dto : list) {&#10;                    cboHocKy.addItem(dto.getMaHocKy() + &quot; - &quot; + dto.getTenHocKy());&#10;                }&#10;            }&#10;        } catch (Exception ex) { ex.printStackTrace(); }&#10;    }&#10;&#10;    private void moLopHocPhan() {&#10;        try {&#10;            String monHocStr = (String) cboMonHoc.getSelectedItem();&#10;            String giangVienStr = (String) cboGiangVien.getSelectedItem();&#10;            String hocKyStr = (String) cboHocKy.getSelectedItem();&#10;            String soLuongStr = txtSoLuongToiDa.getText().trim();&#10;&#10;            if (monHocStr == null || giangVienStr == null || hocKyStr == null || soLuongStr.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Extract IDs from combo box values&#10;            String maMH = monHocStr.split(&quot; - &quot;)[0];&#10;            String maGV = giangVienStr.split(&quot; - &quot;)[0];&#10;            String maHocKy = hocKyStr.split(&quot; - &quot;)[0];&#10;            int soLuongToiDa = Integer.parseInt(soLuongStr);&#10;&#10;            // Create data map&#10;            Map&lt;String, Object&gt; data = new HashMap&lt;&gt;();&#10;            data.put(&quot;maMH&quot;, maMH);&#10;            data.put(&quot;maGV&quot;, maGV);&#10;            data.put(&quot;maHocKy&quot;, maHocKy);&#10;            data.put(&quot;soLuongToiDa&quot;, soLuongToiDa);&#10;&#10;            Response response = networkClient.sendRequest(new Request(Command.LOPHOCPHAN_ADD, data, authToken));&#10;            &#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Mở lớp học phần thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteLopHocPhan() {&#10;        int row = table.getSelectedRow();&#10;        if (row &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn lớp học phần!&quot;);&#10;            return;&#10;        }&#10;&#10;        Long maLHP = Long.parseLong(tableModel.getValueAt(row, 0).toString());&#10;        if (JOptionPane.showConfirmDialog(this, &quot;Xóa lớp học phần &quot; + maLHP + &quot;?&quot;, &quot;Xác nhận&quot;, &#10;            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {&#10;            try {&#10;                Response response = networkClient.sendRequest(new Request(Command.LOPHOCPHAN_DELETE, maLHP, authToken));&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa thành công!&quot;);&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;        loadComboBoxData();&#10;    }&#10;&#10;    private void loadData() {&#10;        try {&#10;            // Get all học kỳ first&#10;            Response hkResponse = networkClient.sendRequest(new Request(Command.HOCKY_GET_ALL, null, authToken));&#10;            if (hkResponse.getStatus() == Status.SUCCESS &amp;&amp; hkResponse.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;HocKyDTO&gt; hkList = (List&lt;HocKyDTO&gt;) hkResponse.getData();&#10;                &#10;                tableModel.setRowCount(0);&#10;                &#10;                // Load lớp học phần for each học kỳ&#10;                for (HocKyDTO hk : hkList) {&#10;                    Response lhpResponse = networkClient.sendRequest(&#10;                        new Request(Command.LOPHOCPHAN_GET_ALL_BY_HOCKY, hk.getMaHocKy(), authToken));&#10;                    &#10;                    if (lhpResponse.getStatus() == Status.SUCCESS &amp;&amp; lhpResponse.getData() instanceof List) {&#10;                        @SuppressWarnings(&quot;unchecked&quot;)&#10;                        List&lt;LopHocPhanDTO&gt; lhpList = (List&lt;LopHocPhanDTO&gt;) lhpResponse.getData();&#10;                        &#10;                        for (LopHocPhanDTO dto : lhpList) {&#10;                            tableModel.addRow(new Object[]{&#10;                                dto.getMaLHP(),&#10;                                dto.getTenMH(),&#10;                                dto.getTenGV(),&#10;                                dto.getTenHocKy(),&#10;                                dto.getSoLuongToiDa()&#10;                            });&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        if (cboMonHoc.getItemCount() &gt; 0) cboMonHoc.setSelectedIndex(0);&#10;        if (cboGiangVien.getItemCount() &gt; 0) cboGiangVien.setSelectedIndex(0);&#10;        if (cboHocKy.getItemCount() &gt; 0) cboHocKy.setSelectedIndex(0);&#10;        txtSoLuongToiDa.setText(&quot;&quot;);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(150, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/MonHocPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/MonHocPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.dto.KhoaDTO;&#10;import iuh.fit.se.common.dto.MonHocDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.List;&#10;&#10;public class MonHocPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaMH, txtTenMH, txtSoTinChi;&#10;    private JComboBox&lt;String&gt; cboKhoa;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnClear;&#10;&#10;    public MonHocPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadKhoa();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã MH&quot;, &quot;Tên môn học&quot;, &quot;Số tín chỉ&quot;, &quot;Mã Khoa&quot;, &quot;Tên Khoa&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) { return false; }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setRowHeight(25);&#10;&#10;        txtMaMH = new JTextField(15);&#10;        txtTenMH = new JTextField(30);&#10;        txtSoTinChi = new JTextField(10);&#10;        cboKhoa = new JComboBox&lt;&gt;();&#10;&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Môn học&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã MH:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaMH, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Tên môn học:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtTenMH, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Số tín chỉ:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtSoTinChi, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Khoa:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(cboKhoa, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(new JScrollPane(table), BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting() &amp;&amp; table.getSelectedRow() &gt;= 0) {&#10;                int row = table.getSelectedRow();&#10;                txtMaMH.setText(tableModel.getValueAt(row, 0).toString());&#10;                txtTenMH.setText(tableModel.getValueAt(row, 1).toString());&#10;                txtSoTinChi.setText(tableModel.getValueAt(row, 2).toString());&#10;                cboKhoa.setSelectedItem(tableModel.getValueAt(row, 3).toString());&#10;                txtMaMH.setEditable(false);&#10;            }&#10;        });&#10;&#10;        btnAdd.addActionListener(e -&gt; addMonHoc());&#10;        btnUpdate.addActionListener(e -&gt; updateMonHoc());&#10;        btnDelete.addActionListener(e -&gt; deleteMonHoc());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void loadKhoa() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.KHOA_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;KhoaDTO&gt; list = (List&lt;KhoaDTO&gt;) response.getData();&#10;                cboKhoa.removeAllItems();&#10;                for (KhoaDTO dto : list) cboKhoa.addItem(dto.getMaKhoa());&#10;            }&#10;        } catch (Exception ex) { ex.printStackTrace(); }&#10;    }&#10;&#10;    private void addMonHoc() {&#10;        String maMH = txtMaMH.getText().trim();&#10;        String tenMH = txtTenMH.getText().trim();&#10;        String soTinChiStr = txtSoTinChi.getText().trim();&#10;        String maKhoa = (String) cboKhoa.getSelectedItem();&#10;&#10;        if (maMH.isEmpty() || tenMH.isEmpty() || soTinChiStr.isEmpty() || maKhoa == null) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            int soTinChi = Integer.parseInt(soTinChiStr);&#10;            MonHocDTO dto = new MonHocDTO(maMH, tenMH, soTinChi, maKhoa, null);&#10;            Response response = networkClient.sendRequest(new Request(Command.MONHOC_ADD, dto, authToken));&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Thêm môn học thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Số tín chỉ phải là số nguyên!&quot;, &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi kết nối: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateMonHoc() {&#10;        String maMH = txtMaMH.getText().trim();&#10;        if (maMH.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn môn học!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            int soTinChi = Integer.parseInt(txtSoTinChi.getText().trim());&#10;            MonHocDTO dto = new MonHocDTO(maMH, txtTenMH.getText().trim(), soTinChi, &#10;                                         (String) cboKhoa.getSelectedItem(), null);&#10;            Response response = networkClient.sendRequest(new Request(Command.MONHOC_UPDATE, dto, authToken));&#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Cập nhật thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteMonHoc() {&#10;        int row = table.getSelectedRow();&#10;        if (row &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn môn học!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;&#10;        String maMH = tableModel.getValueAt(row, 0).toString();&#10;        if (JOptionPane.showConfirmDialog(this, &quot;Xóa môn học &quot; + maMH + &quot;?&quot;, &quot;Xác nhận&quot;, &#10;            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {&#10;            try {&#10;                Response response = networkClient.sendRequest(new Request(Command.MONHOC_DELETE, maMH, authToken));&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa thành công!&quot;);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;        loadKhoa();&#10;    }&#10;&#10;    private void loadData() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.MONHOC_GET_ALL, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;MonHocDTO&gt; list = (List&lt;MonHocDTO&gt;) response.getData();&#10;                tableModel.setRowCount(0);&#10;                for (MonHocDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{dto.getMaMH(), dto.getTenMH(), dto.getSoTinChi(), &#10;                                                   dto.getMaKhoa(), dto.getTenKhoa()});&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaMH.setText(&quot;&quot;);&#10;        txtTenMH.setText(&quot;&quot;);&#10;        txtSoTinChi.setText(&quot;&quot;);&#10;        if (cboKhoa.getItemCount() &gt; 0) cboKhoa.setSelectedIndex(0);&#10;        txtMaMH.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/SinhVienPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/iuh/fit/se/client/gui/panels/SinhVienPanel.java" />
              <option name="updatedContent" value="package iuh.fit.se.client.gui.panels;&#10;&#10;import iuh.fit.se.client.gui.AdminMainFrame;&#10;import iuh.fit.se.client.net.NetworkClient;&#10;import iuh.fit.se.common.model.Gender;&#10;import iuh.fit.se.common.model.SinhVienDTO;&#10;import iuh.fit.se.common.protocol.Command;&#10;import iuh.fit.se.common.protocol.Request;&#10;import iuh.fit.se.common.protocol.Response;&#10;import iuh.fit.se.common.protocol.Status;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class SinhVienPanel extends JPanel implements AdminMainFrame.RefreshablePanel {&#10;    private NetworkClient networkClient;&#10;    private String authToken;&#10;    private JTable table;&#10;    private DefaultTableModel tableModel;&#10;    private JTextField txtMaSV, txtHoTen, txtNgaySinh, txtChuyenNganh, txtDiemTB;&#10;    private JComboBox&lt;String&gt; cboGioiTinh;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnClear;&#10;    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;    public SinhVienPanel(NetworkClient networkClient, String authToken) {&#10;        this.networkClient = networkClient;&#10;        this.authToken = authToken;&#10;        initComponents();&#10;        setupLayout();&#10;        setupEventHandlers();&#10;        loadData();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        String[] columnNames = {&quot;Mã SV&quot;, &quot;Họ tên&quot;, &quot;Ngày sinh&quot;, &quot;Giới tính&quot;, &quot;Chuyên ngành&quot;, &quot;Điểm TB&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) { return false; }&#10;        };&#10;        table = new JTable(tableModel);&#10;        table.setRowHeight(25);&#10;&#10;        txtMaSV = new JTextField(15);&#10;        txtHoTen = new JTextField(25);&#10;        txtNgaySinh = new JTextField(12);&#10;        txtChuyenNganh = new JTextField(20);&#10;        txtDiemTB = new JTextField(10);&#10;        cboGioiTinh = new JComboBox&lt;&gt;(new String[]{&quot;NAM&quot;, &quot;NU&quot;});&#10;&#10;        btnAdd = new JButton(&quot;➕ Thêm&quot;);&#10;        btnUpdate = new JButton(&quot;✏️ Cập nhật&quot;);&#10;        btnDelete = new JButton(&quot;️ Xóa&quot;);&#10;        btnRefresh = new JButton(&quot; Làm mới&quot;);&#10;        btnClear = new JButton(&quot; Xóa trắng&quot;);&#10;&#10;        styleButton(btnAdd, new Color(40, 167, 69));&#10;        styleButton(btnUpdate, new Color(0, 123, 255));&#10;        styleButton(btnDelete, new Color(220, 53, 69));&#10;        styleButton(btnRefresh, new Color(108, 117, 125));&#10;        styleButton(btnClear, new Color(255, 193, 7));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin Sinh viên&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // Row 1&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;Mã SV:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtMaSV, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Họ tên:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtHoTen, gbc);&#10;&#10;        // Row 2&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;Ngày sinh (dd/MM/yyyy):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtNgaySinh, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Giới tính:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(cboGioiTinh, gbc);&#10;&#10;        // Row 3&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        topPanel.add(new JLabel(&quot;Chuyên ngành:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(txtChuyenNganh, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        topPanel.add(new JLabel(&quot;Điểm TB:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        topPanel.add(txtDiemTB, gbc);&#10;&#10;        // Buttons&#10;        gbc.gridx = 0; gbc.gridy = 3;&#10;        gbc.gridwidth = 4;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;        buttonPanel.add(btnAdd);&#10;        buttonPanel.add(btnUpdate);&#10;        buttonPanel.add(btnDelete);&#10;        buttonPanel.add(btnClear);&#10;        buttonPanel.add(btnRefresh);&#10;        topPanel.add(buttonPanel, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(new JScrollPane(table), BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        table.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting() &amp;&amp; table.getSelectedRow() &gt;= 0) {&#10;                int row = table.getSelectedRow();&#10;                txtMaSV.setText(tableModel.getValueAt(row, 0).toString());&#10;                txtHoTen.setText(tableModel.getValueAt(row, 1).toString());&#10;                txtNgaySinh.setText(tableModel.getValueAt(row, 2).toString());&#10;                cboGioiTinh.setSelectedItem(tableModel.getValueAt(row, 3).toString());&#10;                txtChuyenNganh.setText(tableModel.getValueAt(row, 4).toString());&#10;                txtDiemTB.setText(tableModel.getValueAt(row, 5).toString());&#10;                txtMaSV.setEditable(false);&#10;            }&#10;        });&#10;&#10;        btnAdd.addActionListener(e -&gt; addSinhVien());&#10;        btnUpdate.addActionListener(e -&gt; updateSinhVien());&#10;        btnDelete.addActionListener(e -&gt; deleteSinhVien());&#10;        btnRefresh.addActionListener(e -&gt; refresh());&#10;        btnClear.addActionListener(e -&gt; clearForm());&#10;    }&#10;&#10;    private void addSinhVien() {&#10;        try {&#10;            String maSV = txtMaSV.getText().trim();&#10;            String hoTen = txtHoTen.getText().trim();&#10;            LocalDate ngaySinh = LocalDate.parse(txtNgaySinh.getText().trim(), formatter);&#10;            Gender gioiTinh = Gender.valueOf((String) cboGioiTinh.getSelectedItem());&#10;            String chuyenNganh = txtChuyenNganh.getText().trim();&#10;            double diemTB = Double.parseDouble(txtDiemTB.getText().trim());&#10;&#10;            if (maSV.isEmpty() || hoTen.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng nhập đầy đủ thông tin!&quot;);&#10;                return;&#10;            }&#10;&#10;            SinhVienDTO dto = new SinhVienDTO(maSV, hoTen, ngaySinh, gioiTinh, chuyenNganh, null, diemTB);&#10;            Response response = networkClient.sendRequest(new Request(Command.SINHVIEN_ADD, dto, authToken));&#10;            &#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Thêm sinh viên thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void updateSinhVien() {&#10;        try {&#10;            String maSV = txtMaSV.getText().trim();&#10;            if (maSV.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn sinh viên!&quot;);&#10;                return;&#10;            }&#10;&#10;            String hoTen = txtHoTen.getText().trim();&#10;            LocalDate ngaySinh = LocalDate.parse(txtNgaySinh.getText().trim(), formatter);&#10;            Gender gioiTinh = Gender.valueOf((String) cboGioiTinh.getSelectedItem());&#10;            String chuyenNganh = txtChuyenNganh.getText().trim();&#10;            double diemTB = Double.parseDouble(txtDiemTB.getText().trim());&#10;&#10;            SinhVienDTO dto = new SinhVienDTO(maSV, hoTen, ngaySinh, gioiTinh, chuyenNganh, null, diemTB);&#10;            Response response = networkClient.sendRequest(new Request(Command.SINHVIEN_UPDATE, dto, authToken));&#10;            &#10;            if (response.getStatus() == Status.SUCCESS) {&#10;                JOptionPane.showMessageDialog(this, &quot;Cập nhật thành công!&quot;);&#10;                clearForm();&#10;                loadData();&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void deleteSinhVien() {&#10;        int row = table.getSelectedRow();&#10;        if (row &lt; 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn sinh viên!&quot;);&#10;            return;&#10;        }&#10;&#10;        String maSV = tableModel.getValueAt(row, 0).toString();&#10;        if (JOptionPane.showConfirmDialog(this, &quot;Xóa sinh viên &quot; + maSV + &quot;?&quot;, &quot;Xác nhận&quot;, &#10;            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {&#10;            try {&#10;                Response response = networkClient.sendRequest(new Request(Command.SINHVIEN_DELETE, maSV, authToken));&#10;                if (response.getStatus() == Status.SUCCESS) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Xóa thành công!&quot;);&#10;                    clearForm();&#10;                    loadData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + response.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void refresh() {&#10;        loadData();&#10;    }&#10;&#10;    private void loadData() {&#10;        try {&#10;            Response response = networkClient.sendRequest(new Request(Command.GET_ALL_STUDENTS, null, authToken));&#10;            if (response.getStatus() == Status.SUCCESS &amp;&amp; response.getData() instanceof List) {&#10;                @SuppressWarnings(&quot;unchecked&quot;)&#10;                List&lt;SinhVienDTO&gt; list = (List&lt;SinhVienDTO&gt;) response.getData();&#10;                tableModel.setRowCount(0);&#10;                for (SinhVienDTO dto : list) {&#10;                    tableModel.addRow(new Object[]{&#10;                        dto.getMaSV(), &#10;                        dto.getHoTen(), &#10;                        dto.getNgaySinh().format(formatter),&#10;                        dto.getGioiTinh(),&#10;                        dto.getChuyenNganh(),&#10;                        dto.getDiemTB()&#10;                    });&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi tải dữ liệu: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearForm() {&#10;        txtMaSV.setText(&quot;&quot;);&#10;        txtHoTen.setText(&quot;&quot;);&#10;        txtNgaySinh.setText(&quot;&quot;);&#10;        txtChuyenNganh.setText(&quot;&quot;);&#10;        txtDiemTB.setText(&quot;&quot;);&#10;        cboGioiTinh.setSelectedIndex(0);&#10;        txtMaSV.setEditable(true);&#10;        table.clearSelection();&#10;    }&#10;&#10;    private void styleButton(JButton button, Color color) {&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        button.setPreferredSize(new Dimension(120, 35));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>